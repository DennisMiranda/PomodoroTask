---
import Card from "./Card.astro";
import { getStatistics } from "../../scripts/tasksApi";

// Datos iniciales
const statistics = [
  { title: "Pomodoros", quantity: "0", icon: "tomato" },
  { title: "Short Breaks", quantity: "0", icon: "breakCoffee" },
  { title: "Long Breaks", quantity: "0", icon: "pauseCard" },
  { title: "Completed Tasks", quantity: "0", icon: "taskCompleted" },
];
---

<!-- Cards Container -->
<div class="grid grid-cols-2 md:grid-cols-4 gap-4 w-full" id="stats-cards-container">
  {statistics.map((stat) => (
    <Card title={stat.title} quantity={stat.quantity} icon={stat.icon} />
  ))}
</div>

<script>
  import { getStatistics } from "../../scripts/tasksApi";

  // Función para actualizar las cards de estadísticas
  async function updateStatisticsCards() {
    try {
      const response = await getStatistics();
      if (response?.success) {
        const stats = response.data;
        const container = document.getElementById("stats-cards-container");

        if (!container) return;

        // Mapeo de estadísticas a las cards correspondientes
        const statsMapping = {
          "Pomodoros": "pomodorosCompleted",
          "Short Breaks": "shortBreaks",
          "Long Breaks": "longBreaks",
          "Completed Tasks": "tasksCompleted"
        };

        // Actualizar cada card
        const cards = container.children;
        for (let i = 0; i < cards.length; i++) {
          const card = cards[i];
          const titleElement = card.querySelector("p:nth-of-type(2)"); // Título de la card
          if (titleElement) {
            const statKey = statsMapping[titleElement.textContent];
            if (statKey && stats[statKey] !== undefined) {
              const quantityElement = card.querySelector("p:nth-of-type(1)"); // Cantidad
              if (quantityElement) {
                quantityElement.textContent = stats[statKey];
              }
            }
          }
        }
      }
    } catch (error) {
      console.error("Error updating statistics cards:", error);
    }
  }

  // Función para manejar eventos de actualización
  function handleStatsUpdate() {
    updateStatisticsCards();
  }

  // Inicialización
  document.addEventListener("DOMContentLoaded", () => {
    updateStatisticsCards();
    
    // Escuchar eventos de actualización
    document.addEventListener("stats-updated", handleStatsUpdate);
    document.addEventListener("task-completed", handleStatsUpdate);
    document.addEventListener("task-uncompleted", handleStatsUpdate);
    document.addEventListener("pomodoro-completed", handleStatsUpdate);
  });

  // Hacer la función accesible globalmente
  (window as any).updateStatisticsFromExternal = updateStatisticsCards;
</script>