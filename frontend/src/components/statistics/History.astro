<!-- History.astro -->
<div class="w-full h-64 flex flex-col items-center justify-center">
  <canvas id="history" width="400" height="200"></canvas>
  <p id="chart-status" class="text-white mt-2">Cargando estadísticas...</p>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js@4.5.0/dist/chart.umd.min.js"></script>

<script type="module" client:load>
  // Variables globales
  let chartInstance = null;
  const completedTasks = new Map(); // Usamos Map para mejor manejo de tareas

  // Función para obtener los días de la semana en orden correcto
  function getWeekDays() {
    const days = ['Dom', 'Lun', 'Mar', 'Mié', 'Jue', 'Vie', 'Sáb'];
    const today = new Date();
    const currentDay = today.getDay(); // 0 (Domingo) a 6 (Sábado)
    
    // Reordenamos para que el día actual esté al final
    const reorderedDays = [];
    for (let i = currentDay + 1; i < currentDay + 8; i++) {
      reorderedDays.push(days[i % 7]);
    }
    
    return reorderedDays;
  }

  // Función para obtener el índice del día en el gráfico
  function getDayIndex(date) {
    const today = new Date();
    const taskDate = new Date(date);
    const diffTime = today - taskDate;
    const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));
    
    // El día actual es el índice 6 (última posición)
    return 6 - diffDays;
  }

  // Inicializar gráfico
  function initChart() {
    const ctx = document.getElementById('history').getContext('2d');
    const days = getWeekDays();
    
    chartInstance = new Chart(ctx, {
      type: 'bar',
      data: {
        labels: days,
        datasets: [{
          data: Array(7).fill(0),
          backgroundColor: '#7f878c',
          borderRadius: 5
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        scales: {
          x: {
            grid: { display: false },
            ticks: { color: '#000000' }
          },
          y: {
            beginAtZero: true,
            ticks: { 
              stepSize: 1,
              color: '#000000'
            },
            grid: { display: false }
          }
        },
        plugins: {
          legend: { display: false },
          tooltip: {
            callbacks: {
              label: (context) => `${context.parsed.y} ${context.parsed.y === 1 ? 'actividad' : 'actividades'}`
            }
          }
        }
      }
    });
  }

  // Actualizar datos del gráfico
  async function updateChart() {
    const statusElement = document.getElementById('chart-status');
    
    try {
      // 1. Obtener datos de la API
      const { getTimerStats } = await import('/src/scripts/timerApi.js');
      const response = await getTimerStats();
      
      if (!response?.success) {
        throw new Error(response?.error || 'Error al obtener estadísticas');
      }

      // 2. Procesar datos
      const newData = Array(7).fill(0);
      
      // Procesar pomodoros
      if (Array.isArray(response.data)) {
        response.data
          .filter(session => session.session_type === 'work')
          .forEach(session => {
            const dayIndex = getDayIndex(session.session_date);
            if (dayIndex >= 0 && dayIndex < 7) {
              newData[dayIndex] += parseInt(session.count) || 0;
            }
          });
      }
      
      // Procesar tareas completadas
      completedTasks.forEach(date => {
        const dayIndex = getDayIndex(date);
        if (dayIndex >= 0 && dayIndex < 7) {
          newData[dayIndex] += 1;
        }
      });

      // 3. Actualizar gráfico
      if (chartInstance) {
        chartInstance.data.datasets[0].data = newData;
        chartInstance.update();
      }

      if (statusElement) {
        statusElement.textContent = '';
      }
    } catch (error) {
      console.error('Error al actualizar gráfico:', error);
      if (statusElement) {
        statusElement.textContent = 'Error al cargar datos';
        statusElement.style.color = 'red';
      }
    }
  }

  // Manejar tarea completada
  function handleTaskCompleted(event) {
    if (event.detail?.taskId) {
      const date = event.detail.date || new Date().toISOString().split('T')[0];
      completedTasks.set(event.detail.taskId, date);
      updateChart();
    }
  }

  // Manejar tarea no completada
  function handleTaskUncompleted(event) {
    if (event.detail?.taskId) {
      completedTasks.delete(event.detail.taskId);
      updateChart();
    }
  }

  // Inicialización
  document.addEventListener('DOMContentLoaded', () => {
    initChart();
    updateChart();
  });

  // Event listeners
  document.addEventListener('stats-updated', updateChart);
  document.addEventListener('pomodoro-completed', updateChart);
  document.addEventListener('task-completed', handleTaskCompleted);
  document.addEventListener('task-uncompleted', handleTaskUncompleted);

  // Limpiar al hacer logout
  document.addEventListener('logout', () => {
    completedTasks.clear();
  });
</script>