---
---

<div class="w-full h-64 flex flex-col items-center justify-center">
  <canvas id="history" width="400" height="200"></canvas>
  <p id="chart-status" class="text-white mt-2"></p>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js@4.5.0/dist/chart.umd.min.js"></script>

<script type="module" client:load>
  async function renderPomodoroHistory() {
    const canvas = document.getElementById("history");
    const statusElement = document.getElementById("chart-status");

    function updateStatus(message, isError = false) {
      if (statusElement) {
        statusElement.textContent = message;
        statusElement.style.color = isError ? "red" : "white";
        console.log(message);
      }
    }

    if (!canvas) {
      updateStatus("Error: Canvas element not found", true);
      console.error("CRITICAL: Canvas element with id 'history' not found in the DOM.");
      return;
    }

    updateStatus("Loading chart...");

    try {
      const { getTimerStats } = await import('/src/scripts/timerApi.js');
      const userString = localStorage.getItem("user");

      if (!userString) {
        updateStatus("Error: User not found in localStorage", true);
        console.error("CRITICAL: User not found in localStorage.");
        return;
      }

      const user = JSON.parse(userString);
      if (!user.id) {
        updateStatus("Error: User ID not found", true);
        console.error("CRITICAL: User ID not found in parsed user object.");
        return;
      }

      const response = await getTimerStats();
      const { success, data, error } = response;

      if (!success || error) {
        updateStatus(`API Error: ${error}`, true);
        console.error("API Error:", error);
        return;
      }

      if (!Array.isArray(data) || data.length === 0) {
        updateStatus("No statistics data to display");
        const ctx = canvas.getContext("2d");
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        ctx.font = "16px Arial";
        ctx.fillStyle = "black";
        ctx.textAlign = "center";
        ctx.fillText("No statistics data to display.", canvas.width / 2, canvas.height / 2);
        return;
      }

      const countsByDate = {};
      data
        .filter(i => i.session_type === "work")
        .forEach(({ session_date, count }) => {
          const key = new Date(session_date).toISOString().split("T")[0];
          countsByDate[key] = parseInt(count, 10) || 0;
        });

      const labels = [];
      const values = [];
      const today = new Date();

      for (let i = 6; i >= 0; i--) {
        const date = new Date(today);
        date.setDate(today.getDate() - i);
        labels.push(date.toLocaleDateString("en-US", { weekday: "short" }).slice(0, 3));
        const isoKey = date.toISOString().split("T")[0];
        values.push(countsByDate[isoKey] || 0);
      }

      const ctx = canvas.getContext("2d");
      const oldChart = Chart.getChart(canvas);
      if (oldChart) {
        oldChart.destroy();
      }

      new Chart(ctx, {
        type: "bar",
        data: {
          labels,
          datasets: [{
            data: values,
            backgroundColor: "#7f878c", // el color de las barras
            borderRadius: 5,
          }],
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          scales: {
            x: {
              grid: { display: false },
              ticks: { color: "#000000" },
            },
            y: {
              beginAtZero: true,
              ticks: { stepSize: 1, color: "#000000" },
              grid: { display: false },
            },
          },
          plugins: {
            legend: { display: false },
            datalabels: {
              anchor: "center",
              align: "center",
              formatter: value => value,
              color: "#000000", // Cambi√© el color del texto dentro de las barras
              font: { weight: "bold", size: 14 },
            },
          },
        },
      });

      updateStatus("");
    } catch (e) {
      console.error("CRITICAL ERROR: Failed to render chart.", e);
      updateStatus(`Error rendering chart: ${e.message}`, true);

      if (canvas) {
        const ctx = canvas.getContext("2d");
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        ctx.font = "16px Arial";
        ctx.fillStyle = "red";
        ctx.textAlign = "center";
        ctx.fillText("Error loading API data.", canvas.width / 2, canvas.height / 2);
      }
    }
  }

  document.addEventListener("astro:page-load", renderPomodoroHistory);
  document.addEventListener("DOMContentLoaded", renderPomodoroHistory);
</script>
